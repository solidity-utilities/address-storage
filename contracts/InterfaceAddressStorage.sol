// SPDX-License-Identifier: AGPL-3.0
pragma solidity 0.8.7;

/// @dev Generated by `@solidity-utilities/abi-to-interface`
interface InterfaceAddressStorage {
    ///
    function authorized(address) external view returns (bool);

    ///
    function data(address) external view returns (address);

    ///
    function indexes(address) external view returns (uint256);

    ///
    function keys(uint256) external view returns (address);

    ///
    function owner() external view returns (address);

    ///
    function addAuthorized(address _key) external;

    ///
    function changeOwner(address _new_owner) external;

    ///
    function clear() external;

    ///
    function deleteAuthorized(address _key) external;

    ///
    function get(address _key) external view returns (address);

    ///
    function getOrElse(address _key, address _default)
        external
        view
        returns (address);

    ///
    function getOrError(address _key, string memory _reason)
        external
        view
        returns (address);

    ///
    function has(address _key) external view returns (bool);

    ///
    function indexOf(address _key) external view returns (uint256);

    ///
    function indexOfOrError(address _key, string memory _reason)
        external
        view
        returns (uint256);

    ///
    function listKeys() external view returns (address[] memory);

    ///
    function remove(address _key) external returns (address);

    ///
    function removeOrError(address _key, string memory _reason)
        external
        returns (address);

    ///
    function selfDestruct(address _to) external;

    ///
    function set(address _key, address _value) external;

    ///
    function setOrError(
        address _key,
        address _value,
        string memory _reason
    ) external;

    ///
    function size() external view returns (uint256);
}
